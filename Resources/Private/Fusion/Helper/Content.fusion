prototype(Jonnitto.PrettyEmbedHelper:Content) < prototype(Neos.Neos:ContentComponent) {
    contentElement = true

    // Global Settings for all Embed Players
    maximumWidth = ${Configuration.setting('Jonnitto.PrettyEmbedHelper.maximumWidth')}
    wrapper = ${Configuration.setting('Jonnitto.PrettyEmbedHelper.wrapper')}
    image = ${q(node).property('image')}

    // Need to be defined
    package = null

    origin = Neos.Neos:NodeUri {
        node = ${site}
        absolute = true
        @process.onlyTheDomain = ${String.pregMatch(value, '(https?:\/\/[^\/]+)')[0]}
    }

    // Global properties
    lightbox = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'lightbox'
    }

    # Whether the video plays inline on supported mobile devices.
    # Note that if set to false it does not imply that the video will always be played in fullscreen.
    playsinline = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'playsinline'
    }

    # If true, the browser will automatically seek back 
    # to the start upon reaching the end of the video.
    loop = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'loop'
    }

    # If true, the browser will offer controls to allow the user to control
    # video playback, including volume, seeking, and pause/resume playback.
    controls = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'controls'
    }

    # Whether the video is muted upon loading. Set automatically to true if autoplay is enabled
    muted = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'muted'
    }

    @if.hasPackage = ${this.package}
    @context {
        // set variable for helper prototypes
        package = ${this.package}
        // Allow to disable the content element wrapping
        contentElement = ${this.contentElement}
    }
    @process.contentElementWrapping.@if.contentElementWrapping = ${contentElement}
}
